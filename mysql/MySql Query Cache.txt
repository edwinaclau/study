MySQL 5.5
innodb_version 1.1.6
MySQL Query Cache就是用来缓存和 Query 相关的数据的。具体来说，Query Cache 缓存了我们客户端提交给 MySQL 的 SELECT 语句以及该语句的结果集。大概来讲，就是将 SELECT 语句和语句的结果做了一个 HASH 映射关系然后保存在一定的内存区域中。
mysql> show variables like 'query_cache%'\G
*************************** 1. row ***************************
Variable_name: query_cache_limit
        Value: 2097152
允许Cache的单条Query结果集的最大容量，该值为2MB，超过此参数设置的 Query 结果集将不会被 Cache
*************************** 2. row ***************************
Variable_name: query_cache_min_res_unit
        Value: 4096
设置Query Cache中每次分配内存的最小空间大小，也就是每个Query的Cache最小占用的内存空间大小
*************************** 3. row ***************************
Variable_name: query_cache_size
        Value: 67108864
设置Query Cache所使用的内存大小，默认值为0，大小必须是1024的整数倍，如果不是整数倍，MySQL 会自动调整降低最小量以达到1024的倍数
*************************** 4. row ***************************
Variable_name: query_cache_type
        Value: ON
控制Query Cache功能的开关，可以设置为0(OFF),1(ON)和2(DEMAND)三种，意义分别如下：
0(OFF)：关闭Query Cache功能，任何情况下都不会使用 Query Cache
1(ON)：开启Query Cache功能，但是当SELECT语句中使用的SQL_NO_CACHE提示后，将不使用Query Cache
2(DEMAND)：开启Query Cache功能，但是只有当SELECT语句中使用了SQL_CACHE提示后，才使用 Query Cache
*************************** 5. row ***************************
Variable_name: query_cache_wlock_invalidate
        Value: OFF
控制当有写锁定发生在表上的时刻是否先失效该表相关的Query Cache，如果设置为1(TRUE)，则在写锁定的同时将失效该表相关的所有Query Cache，如果设置为0(FALSE)则在锁定时刻仍然允许读取该表相关的Query Cache。
 
如何确认一个系统的 Query Cache的运行是否健康，命中率如何，设置量是否足够？
mysql> show global status like 'Qcache%'\G
*************************** 1. row ***************************
Variable_name: Qcache_free_blocks
        Value: 1
目前还处于空闲状态的 Query Cache中内存Block数目
*************************** 2. row ***************************
Variable_name: Qcache_free_memory
        Value: 67091120
目前还处于空闲状态的Query Cache内存总量
*************************** 3. row ***************************
Variable_name: Qcache_hits
        Value: 0
Query Cache 命中次数
*************************** 4. row ***************************
Variable_name: Qcache_inserts
        Value: 0
向 Query Cache 中插入新的 Query Cache 的次数，也就是没有命中的次数
*************************** 5. row ***************************
Variable_name: Qcache_lowmem_prunes
        Value: 0
当 Query Cache 内存容量不够，需要从中删除老的 Query Cache 以给新的 Cache 对象使用的次数
*************************** 6. row ***************************
Variable_name: Qcache_not_cached
        Value: 17
没有被 Cache 的 SQL 数，包括无法被 Cache 的 SQL 以及由于 query_cache_type 设置的不会被 Cache 的 SQL
*************************** 7. row ***************************
Variable_name: Qcache_queries_in_cache
        Value: 0
目前在 Query Cache 中的 SQL 数量
*************************** 8. row ***************************
Variable_name: Qcache_total_blocks
        Value: 1
Query Cache 中总的 Block 数量
 
下面是从该文章，摘录的常见问题。
Query Cache 如何处理子查询的？
这是我遇到的最为常见的一个问题。其实 Query Cache 是以客户端请求提交的 Query 为对象来处理的，只要客户端请求的是一个 Query，无论这个 Query 是一个简单的单表查询还是多表 Join，亦或者是带有子查询的复杂 SQL，都被当作成一个 Query，不会被分拆成多个 Query 来进行 Cache。所以，存在子查询的复杂 Query 也只会产生一个Cache对象，子查询不会产生单独的Cache内容。UNION[ALL] 类型的语句也同样如此。
Query Cache 是以 block 的方式存储的数据块吗？
不是，Query Cache 中缓存的内容仅仅只包含该 Query 所需要的结果数据，是结果集。当然，并不仅仅只是结果数据，还包含与该结果相关的其他信息，比如产生该 Cache 的客户端连接的字符集，数据的字符集，客户端连接的 Default Database等。
Query Cache 为什么效率会非常高，即使所有数据都可以 Cache 进内存的情况下，有些时候也不如使用 Query Cache 的效率高？
Query Cache的查找，是在MySQL接受到客户端请求后在对Query进行权限验证之后，SQL解析之前。也就是说，当 MySQL接受到客户端的SQL后，仅仅只需要对其进行相应的权限验证后就会通过Query Cache来查找结果，甚至都不需要经过Optimizer模块进行执行计划的分析优化，更不需要发生任何存储引擎的交互，减少了大量的磁盘IO和CPU运算，所以效率非常高。
客户端提交的SQL语句大小写对 Query Cache有影响吗？
有，由于Query Cache在内存中是以HASH结构来进行映射，HASH 算法基础就是组成SQL语句的字符，所以必须要整个 SQL语句在字符级别完全一致，才能在Query Cache中命中，即使多一个空格也不行。
一个SQL语句在Query Cache中的内容，在什么情况下会失效？
为了保证Query Cache中的内容与是实际数据绝对一致，当表中的数据有任何变化，包括新增，修改，删除等，都会使所有引用到该表的SQL的Query Cache失效。
为什么我的系统在开启了Query Cache之后整体性能反而下降了？
当开启了Query Cache之后，尤其是当我们的 query_cache_type 参数设置为 1 以后，MySQL 会对每个 SELECT 语句都进行 Query Cache 查找，查找操作虽然比较简单，但仍然也是要消耗一些 CPU 运算资源的。而由于 Query Cache 的失效机制的特性，可能由于表上的数据变化比较频繁，大量的Query Cache频繁的被失效，所以 Query Cache 的命中率就可能比较低下。所以有些场景下，Query Cache 不仅不能提高效率，反而可能造成负面影响。
