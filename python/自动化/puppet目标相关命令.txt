/usr/local/puppet

   erb facter filebucket irb pi puppet puppetdoc ralsh




   erb 模板调试

   irb Ruby 交互 shell

   facter Agent信息收集工具

   ralsh  资源RAL

   testrb Ruby测试工具

   puppetca 证书签名授权命令

   puppet Agent  守护进程


   puppetmasterd

   puppetrun


   Puppet 主要配置命令

   Master puppet.conf,auth.conf,namespceauth.conf,autosign.conf,fileserver.conf , tagmail.conf

   [main]


   [master]


   [agent]


   auth.conf

   HTTP Network API 替代 XMLRPC协议

   path ~ ^/file_(metadata|content)/user_file/
   auth yes
   allow_ip 192.168.100.0/24

   path

   auth

   allow_ip

 fileserver.conf
    



   file {"/etc/sudoers":
       mode  => 440,
	   owner => root,
	   grouop => root,
	   source =>"puppet://mount_point/sudoers",
   }

    class http::install{
	   $listenaddress = "$::ipaddress"
	   $serveradmin = ""
	   $user = "nobody"
	   $group = "nodoby"


	   file {'/usr/local/apache2/conf/http.conf'}
	         mode => '777'
			 owner => 'root',
		     group => 'root',
			 content => template("http:/http.conf.default.erb")
	}


puppet filebucket

    文件备份 传输



	1） 备份
	2） 获取
	3） 还原



manifiests  目录介绍

   node 节点


   node 'web.puppet.com' 
{}


   node 'xxx.puppet.com'

	
	
	}





auth.conf

   https://{server}:{port}/{enviroment}/{resource}/{key}
   Puppet 实现了XMLRCP协议

   auth.conf
      path, environment, method, auth,allow, allow_ip, deny


autosign.conf




puppet agent --server puppet.example.com --test

puppet cert --list

puppet cert -sign puppet_agent


 node 'www1.example.com' {
      include common
	  include apache
	  include squid

}



node 'www1.example.com'{

}


node 'www2.example.com' {

}


modules 目录

 /etc/puppet/modules/my_module
                             _mainifests/
							 _files/
							 _lib/
							 _templates/
							 _tests/
							 _spec/

 class example {
     
 
 }



定义有参数的class 类

    class apache ($stat = 'installed') {
	     package {
		       'httpd':
			   'ensure' => $stat
			   'before' => File['/etc/httpd.conf'],
		 
		 }
	
	}


node base {
   include common
}

node 'xx.com' inherits base {

}



class base::linux {
     file {
	    '/etc/passwd': 
		 owner => 'root',
	     group => 'root',
		 mode  => '0644',
	 
	 }

}


puppet 不支持多继承


touch /etc/puppet/mainfests/httpd/maifests/init.pp
      ~/install.pp
	  ~/service.pp
      ~/httpd/files/
	  ~/httpd/tests/
	  ~/httpd/spec/

template 就是ERP目录模板

manifests init.pp是入口文件
install.pp, apache service.pp文件 作用是apache 的启动类

file 目录  httpd.conf 文件，Apache 守护进程，Agent可以通过puppet文件协议下载http.conf配置文件


 manifests / init.pp

          files/ http.conf

		  /lib  
		  /template
		  te

class httpd {
      include httpd::install
	  include httpd::service
}


install.pp

class httpd::install{
     package {
	         'apache2'
			 ensure => present,
	 }

}

class httpd::service {
    service {
	   'apache2' :
	 ensure => running,
	 hasrestatrt => true,
	 enable      => true,
	 require     => Class["httpd::install"],
	
}


site.pp加载配置文件



}



变量作用域

$content  = "some content"
file {
  '/tmp/testing':
  ensure => file,
  content => $content,

}


$content = "content"


local 作用域变量在local作用域中有效


同一个作用域不可以声明相同变量，top作用域,node

top作用域只在top作用域生效


node 节点作用域的变量只在node节点生效

noe节点作用域的变量只在node节点中生效，但node节点


local 作用域变量只在local作用域有效。但local作用域


example::parent类 example::other   example::four

example::child

example::parent



(1) top 作用域 

   声明变量后可以在class类内 和 node 节点内调用的作用域 称为 top作用域

（2） example::child(子类)


site.pp
    $top_variable = "top_variable"
	class example {
	      notify {"Message from elsewhere: $top_variable":}
	}

(2)node作用域




Facter 变量

  ipaddress

  kernel

  memorysize

  operatingsystem

  rubyversion

  uptime

  hostname



  notify.pp
  notify {"$ipaddress":}

内置变量
  $enviroment

  $clientcert


  Master
  $servername
  $serverip

  $module_name



$variable1 = 'hello wrold'
$variable2 = 'hello world'


path => 'c:\Program Files(x86)'


$product = 8 * 4
$product = 7 + 5

$foo = ['one', 'two', 'three']
notice($foo[1])




数组追加


$package = ['base' , 'php']

class nginx {
    $package += ['nginx']
}


class apache {
     $packages += ['apache']
}

嵌套数组

    $foo = [ 'one', {'second' => 'two', 'third' => 'threee'}]


哈希类型

  { key => 'val1', key2 => 'val2',...}

布尔类型

  $switch = true
  $switch = false

  正则

puppet


   Puppet tag

    apache::vhost {'docs.puppletlabs.com'}
	port => 80,
	tag  => ['us_mirror1', 'us_mirr2'],



	pupp



	init.pp
	class apache {
	    include::apache::ssl
		include::apache::virtual_host
	}

  ssl.pp
     class apache::ssl {..}

  virtual_host.pp
     define apache::virtual_host () {..}




	 class myservice ($ensure=='running') {
	      
	 }

     if $ensure in [ running, stopped] {
	        $_ensure = $ensure
	 } else {
	       fail()
	 }


    case $::operatingsystem {
	     centos: { $package_list = 'openssh-server'}
	     solaris: {$package_list = [ SUNWsshr, SUNWsshu]}
		 default: {fail("Module")}
	}


   File { owner => '0', group => ''}


   Puppet资源分类

   Puppet中的resources 

   常用资源: file, filebucket, group, exec, host, notify, cron, service user 和 package

   次常用资源：augeas comm


   运维--->Puppet语言--->user group file package notiyf exec cron ---> puppet---> Puppet 提供者--->windows suse rehat buntu freebsd


   file 资源常用属性

   file {
   
   
   
      path
	  ensure
	  backup
	  checksum
	  content
	  force
	  group
	  links
	  mode
	  owner
	  source
	  target
	  selinux_ignore_default
	  selrange
	  selrole
	  seltype
	  seluser
   
   }



path: 指定要管理的文件或目录的路径，必须用引号起来

ensure : 5个值 absent present file directory link


present值表示匹配文件，检查path中路径是否存在，不存在就创建，

directory 如果删除的是目录，

backup : backup 决定文件内容在被修改前是否进行备份，puppet有两种备份
       1文件备份在Agent上被修改文件目录中
	   2


checksum: 检查文件是否被修改过，通过它检查文件的一致性，有几种检查


content: 可以向文件中追加内容或者调用template函数向ERB模板中追加内容


file {'/etc/resolv.conf':
      content => 'nameserver: 192.43.23.1'
}

force: 可以将一个目录变成一个连接，可用true false yes no其中

group: 文件的用户组


links 定义操作链接的文件，可以设置的值 follow 和manage


mode: 用于设置文件权限

source: 定源文件的位置，值可以指定远程文件或者本地的完整路径


file {'/etc/nfs.conf':

   source => [
	   "puppet://modules/nfs/conf.$host",
	   "puppet://modules/nfs/conf.$operatingsystem",
	   "puppet://modules/nfs/conf"
	   
	   ]

}


target : 指定创建软连接的目标

file {  '/etc/inetd.conf':
ensure => link,
	   target => 'inet/ineted.conf',
	

}


file {'/etc/passwd':
    owner => 'root',
	group => 'root',
	mode  => '644',
}


file {'/etc/shadow':
       owner => 'root',
	   group => 'root',
	   mode  => '440',
}





ERB 语言

  file {"/etc/resolve.conf":
  
  content => template('resolve/resolve.erb')}



  <% @in_var %>
  nameserver 172.16.1.27
  <% end %>


  变量
  $ip_1 = "192.168.1.1"
  $ip_2 = "192.43.23.1"
  file {"/etc/resolve.conf":
  content => template('resolve/resolve.erb')},
  }


nameserver <%= ip_1 %>
nameserver <%= ip_2 %>


<% if 条件表达式1 %>
   执行语句
<% if 条件表达式2 %>
   执行语句2
<% else %>
   执行语句3
<% end %>



if ... elsif...else案列


class postfix::install {
    package

}





<% [1,2,3,4,5,6,7,8,9].each do |do| -%>
    <% val %>
<% end -%>


$arr_value =[]




Facter
  收集客户端的性能分析工具


  Facter参数介绍


  Facter 
  -y yaml
  -j json
  --trace
  --external -dir DIR


  --no-external-dir

  -d --debug
  -t --timing
  -p --puppet
  -v --version
  -h --help


   yaml参数，通过yaml格格式
   json参数
   trace参数




Facter 应用

  Facter 与 Puppet 结合


  Facter 与 Puppet 集合

  case $::operatingsystem {
      'CentOS': { include centos}
	  'MacOS' : { include mac}
  
  }


  Physicalprocessorcount

  Processorcount

  proccessor0-7


  内存与swap相关变量


  memorysize 物理内存容量        swapsize

  memoryfree 空闲的物理内存容量  swapfree


  $mem_size = regsubst($memorysize," GB", "")
  $mem_free = regsub($swapsize, "GB", "")



  Facter 获取机器 内存 与 swap分区容量信息


  网络接口与硬件地址相关变量

  interfaces => eth0 eth1 sit0 tun10



  ipaddress =>
  netmark
  ipaddress=>
  netmark_eth1 =>



  Facter收集网络接口的网卡硬件地址变量

  macaddress
  macaddress


  Ruby 语言来扩展Facter 的变量

  案列1：
     Facter.add(:custom)do
	 secode do
	    "This is custom facter"
	 end
   end


   facter | grep custom
   custom => This is cutom facter


   案列2

   Facter.add(:loadavg) do
       setcode do
	       Facter::Util::Resolution.exec('cat /sys/loadavg')
		   end
	end


	facter | grep loadavg


	2.通过环境变量来扩展Facter的变量
	    
	export Facter_"变量名" = "变量值"


	export Facter_loadavg ='cat /sys/loadavg'
	facter | grep loadavg



	Enternal Facter 外部扩展变量



	编写与分发 facter 扩展

	打开Puppet 的插件同步
	[main]
	pluginsync = true


  operatingsystem => SLES
  operatingsystemrelease => 10.1


  $packages = $operatingsystem ? {
              /(?i-mx:ubuntu|debian)/
  
  }


kernel
    kernel=> Linux
	kernelmajversion => 2.6

Puppet高级功能
   
ENC 是清单配置管理的一个替代工具

用不同语言 转化为 YAML ,

Puppet 继承了 Ruby 的DSL

可以通过DOT语言来描绘出Puppet的代码逻辑关系


避免逻辑关系复杂的问题


ENC 是 Puppet 中的脚本抽象层，通过Ruby Shell PHP Perl Python 来替代manifests的清单功能


ENC 的配置

  YAML

ENC 配置

[master]
node_termiunx  = exec
external_nodes /etc/puppet/enc/ruby_enc.rb

master参数






Puppet 的关系图

 DOT 语言  是一种文本图形描述语言

 test.dot

 digraph graphname {
      a -> b -> c;
	  b -> d;
 }


a依赖b,b依赖c和 d

Graphviz 可视化软件
yum install graphviz graphviz-gd


源码编译方式




Puppet 与 Graphviz 关系图

site.pp

 package { "Nginx":
      ensure => install,
	  before => File['/usr/local/nginx/conf/nginx.conf'],
 }

file { '/usr/local/nginx/conf/nginx.conf':
       source => 'puppetL///files/nginx/nginx.conf',
	   notify => 'service['nginx']',
}

service { 'Nginx':
    ensure => 'running',
    enable => 'true',
}


puppet agent --server example.com --test --graph


 通过graph 参数

 relationships.dot

 resources.dot

 expanedrelationships.dot:

 resources.dot:


Ruby DSL

  1)site.rb 文件 
  node /web.example.con/ do
      include base
  end


  2)init.rb 文件  im





  报告系统
    Puppet::Transaction::Report类生成YAML格式 从Agent 推送到 Master指定目录下




	Puppet Web GUI

     
